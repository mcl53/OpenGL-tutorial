#version 330 core
out vec4 FragColour;
in vec3 drawColour;
in vec2 TextureCoords;
in vec3 Normal;
in vec3 FragPos;

struct Material {
  sampler2D diffuse;
  vec3 specular;
  float shininess;
};

struct Light {
  vec3 lightPos;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Material material;
uniform Light light;
uniform vec3 viewPos;

uniform float textureMix;
void main() {
  // Ambient
  vec3 ambient = light.ambient * vec3(texture(material.diffuse, TextureCoords));

  // Diffuse
  vec3 norm = normalize(Normal);
  vec3 lightDir = normalize(light.lightPos - FragPos);
  float diff = max(dot(norm, lightDir), 0.0f);
  vec3 diffuse = light.diffuse * (diff * vec3(texture(material.diffuse, TextureCoords)));

  // Specular
  vec3 viewDir = normalize(viewPos - FragPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess);
  vec3 specular = light.specular * (spec * material.specular);

  // Output
  vec3 finalColour = ambient + diffuse + specular;
  FragColour = vec4(finalColour, 1.0f);
}