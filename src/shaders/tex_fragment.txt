#version 330 core
out vec4 FragColour;
in vec2 TextureCoords;
in vec3 Normal;
in vec3 FragPos;

struct Material {
  sampler2D diffuse;
  sampler2D specular;
  float shininess;
};

struct Light {
  vec3 position;
  vec3 direction;
  float cutoff;
  float outerCutoff;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;

  //float constant;
  //float linear;
  //float quadratic;
};

uniform Material material;
uniform Light light;
uniform vec3 viewPos;

void main() {
  // Ambient
  vec3 ambient = light.ambient * texture(material.diffuse, TextureCoords).rgb;

  // Diffuse
  vec3 norm = normalize(Normal);
  vec3 lightDir = normalize(light.position - FragPos);
  float diff = max(dot(norm, lightDir), 0.0f);
  vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TextureCoords).rgb;

  // Specular
  vec3 viewDir = normalize(viewPos - FragPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess);
  vec3 specular = light.specular * spec * texture(material.specular, TextureCoords).rgb;

  // Light attenuation
  //float distance = length(light.position - FragPos);
  //float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

  //ambient *= attenuation;
  //diffuse *= attenuation;
  //specular *= attenuation;
  
  // Spotlight
  float theta = dot(lightDir, normalize(-light.direction));
  float epsilon = light.cutoff - light.outerCutoff;
  float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0f, 1.0f);

  diffuse *= intensity;
  specular *= intensity;

  vec3 finalColour = ambient + diffuse + specular;
  FragColour = vec4(finalColour, 1.0f);
}