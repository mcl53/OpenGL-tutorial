#version 330 core
out vec4 FragColour;
in vec2 TextureCoords;
in vec3 Normal;
in vec3 FragPos;

struct Material {
  sampler2D diffuse;
  sampler2D specular;
  float shininess;
};
uniform Material material;

struct DirLight {
  vec3 direction;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};
uniform DirLight dirLight;
vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir);

struct PointLight {
  vec3 position;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;

  float constant;
  float linear;
  float quadratic;
};
#define NR_POINT_LIGHTS 4
uniform PointLight pointLights[NR_POINT_LIGHTS];
vec3 calcPointLight(PointLight light, vec3 normal, vec3 FragPos, vec3 viewDir);

struct SpotLight {
  vec3 position;
  vec3 direction;

  float cutoff;
  float outerCutoff;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;

  float constant;
  float linear;
  float quadratic;
};
uniform SpotLight spotLight;
vec3 calcSpotlight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

uniform vec3 viewPos;


void main() {
  //set variables
  vec3 norm = normalize(Normal);
  vec3 viewDir = normalize(viewPos - FragPos);

  //directional lighting
  vec3 result = calcDirLight(dirLight, norm, viewDir);

  //point lights
  for (int i = 0; i < NR_POINT_LIGHTS; i++) {
    result += calcPointLight(pointLights[i], norm, FragPos, viewDir);
  }

  //spotlight
  result += calcSpotlight(spotLight, norm, FragPos, viewDir);

  FragColour = vec4(result, 1.0f);
}


vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir) {
  vec3 lightDir = normalize(-light.direction);

  // diffuse shading
  float diff = max(dot(normal, lightDir), 0.0f);

  //specular shading
  vec3 reflectDir = reflect(-lightDir, normal);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess);

  // combine
  vec3 ambient = light.ambient * vec3(texture(material.diffuse, TextureCoords));
  vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TextureCoords));
  vec3 specular = light.specular * spec * vec3(texture(material.specular, TextureCoords));

  return (ambient + diffuse + specular);
}


vec3 calcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {
  vec3 lightDir = normalize(light.position - fragPos);

  //diffuse shading
  float diff = max(dot(normal, lightDir), 0.0f);

  //specular shading
  vec3 reflectDir = reflect(-lightDir, normal);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess);

  //attenuation
  float distance = length(light.position - fragPos);
  float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

  //combine
  vec3 ambient = light.ambient * vec3(texture(material.diffuse, TextureCoords));
  vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TextureCoords));
  vec3 specular = light.specular * spec * vec3(texture(material.specular, TextureCoords));

  ambient *= attenuation;
  diffuse *= attenuation;
  specular *= attenuation;

  return (ambient + diffuse + specular);
}


vec3 calcSpotlight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {
  vec3 lightDir = normalize(light.position - fragPos);

  // diffuse shading
  float diff = max(dot(normal, lightDir), 0.0f);

  //specular shading
  vec3 reflectDir = reflect(-lightDir, normal);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess);

  //attenuation
  float distance = length(light.position - fragPos);
  float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

  //combine
  vec3 ambient = light.ambient * vec3(texture(material.diffuse, TextureCoords));
  vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TextureCoords));
  vec3 specular = light.specular * spec * vec3(texture(material.specular, TextureCoords));
  
  ambient *= attenuation;
  diffuse *= attenuation;
  specular *= attenuation;

   // Spotlight
  float theta = dot(lightDir, normalize(-light.direction));
  float epsilon = light.cutoff - light.outerCutoff;
  float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0f, 1.0f);

  diffuse *= intensity;
  specular *= intensity;

  return (ambient + diffuse + specular);
}